name: Deploy Lambda
run-name: Deploy ${{ github.ref_name }} to ${{ github.event.inputs.environment }}
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose an environment to deploy to'
        type: choice
        required: true
        options:
        - 'dev'
        - 'qa'

jobs:
  pre-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Use Node 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - run: npm ci
      - run: npm run lint

      - name: Test coverage
        run: npm run test

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        source: ["lambda-code"]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node 20
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - run: npm ci
        working-directory: ${{ matrix.source }}

      - run: npm prune --production
        working-directory: ${{ matrix.source }}

      - name: Zip artifact
        run: zip ${{ matrix.source }}.zip ./* -r

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.source }}
          path: ${{ matrix.source }}.zip

  deploy-functions:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        source: ["lambda-code"]
    # environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Download function zip from build job
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.source }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1" # Replace with your AWS region

      - name: Upload artifact to S3
        run: |
          aws s3 cp ${{ matrix.source }}.zip s3://your-bucket-name/${{ matrix.source }}/${{ github.sha }}.zip

      - name: Update Lambda Function
        run: |
          aws lambda update-function-code \
            --function-name your-lambda-function-name \
            --s3-bucket your-bucket-name \
            --s3-key "${{ matrix.source }}/${{ github.sha }}.zip"

  deploy-tf-code:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v 1

      - name: Initialize Terraform
        run: terraform init
        working-directory: ./terraform

      - name: Apply Terraform configuration
        if: ${{ github.event.inputs.Action == 'Plan' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run:  terraform plan 
        working-directory: ./terraform

      - name: Apply Terraform configuration
        if: ${{ github.event.inputs.Action == 'Apply' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - name: Destroy Terraform configuration
        if: ${{ github.event.inputs.Action == 'Destroy' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform destroy -auto-approve  
        working-directory: ./terraform   
